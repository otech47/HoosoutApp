{
  "name": "xsql",
  "version": "1.0.1",
  "description": "SQL Query Builder",
  "keywords": [
    "sql",
    "query",
    "builder",
    "mysql",
    "mariadb",
    "sqlite",
    "postgresql",
    "pg"
  ],
  "license": "MIT",
  "homepage": "https://github.com/simov/xsql",
  "author": {
    "name": "simo",
    "email": "simeonvelichkov@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/simov/xsql.git"
  },
  "dependencies": {
    "type-check": "0.3.1"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "main": "./lib/instance",
  "scripts": {
    "test": "node_modules/mocha/bin/mocha"
  },
  "readme": "\n# XSQL\n\n```js\nvar Xsql = require('xsql');\nvar x = new Xsql({dialect:'mysql'});\n```\n\n```js\nvar query = [\n  x.select(x.names(['col1','col2'],'tbl')),\n  x.from(x.name('tbl')),\n  x.where(x.eq(x.name('id','tbl'),2)),\n  ';'\n].join(' ');\n```\n\n```sql\nselect `tbl`.`col1`,`tbl`.`col2` from `tbl` where `tbl`.`id`=2 ;\n```\n\n\n---\n\n\n## Primitives\n\n- **`quotes`**     : [`String`]\n- **`wrap`**       : [`String`, `Undefined|String`]\n- **`escape`**     : [`String`]\n- **`string`**     : [`String`, `Undefined|String`]\n\n\n- **`name`**       : [`String`, `Undefined|String`, `Undefined|String`]\n- **`names`**      : [`Array`, `Undefined|String`, `Undefined|String`]\n- **`schema`**     : [`Undefined|String`]\n- **`as`**         : [`String`, `String`]\n- **`alias`**      : [`String`, `String`]\n- **`func`**       : [`String`, `String|Array`, `Undefined|String`]\n- **`select`**     : [`String|Array`]\n- **`from`**       : [`String`]\n- **`join`**       : [`String`, `String|Array`, `Undefined|String`]\n- **`eq`**         : [`String`, `String|Number|Null`]\n- **`eqv`**        : [`String`, `Undefined|Null|String|Number|Boolean`]\n- **`groupby`**    : [`String|Array`]\n- **`orderby`**    : [`String|Object|Array`, `Undefined|String`]\n- **`limit`**      : [`Number`, `Number`]\n- **`in`**         : [`String|Number|Array`]\n- **`and`**        : [`String|Array`]\n- **`or`**         : [`String|Array`]\n- **`between`**    : [`String|Number`, `String|Number`]\n- **`like`**       : [`String`]\n- **`where`**      : [`String|Array`, `Undefined|String`]\n- **`insert`**     : [`String`, `String|Array`, `String|Array`]\n- **`update`**     : [`String`, `String|Array`, `String|Array`]\n- **`delete`**     : [`String`]\n\n\n---\n\n\n## Examples\n\n### Functions\n\n```js\nvar x = new xsql({dialect:'mysql'});\n\nvar concat = x.func('concat_ws',[\n  x.wrap(' '),\n  x.name('col1','tbl'),\n  x.name('col2','tbl')\n]);\n\nvar group = x.func('group_concat',['distinct', concat],' ');\n\nvar partial = x.as(group,x.name('alias'));\n```\n\n```sql\ngroup_concat(distinct concat_ws(' ',`tbl`.`col1`,`tbl`.`col2`)) as `alias`\n```\n\n### Join Tables\n\n```js\nvar query = [\n  x.select([x.name('col','tbl1'),x.name('col','tbl2')]),\n  x.from(x.name('tbl1')),\n  x.join(x.name('tbl2'),x.eq(x.name('id','tbl1'),x.name('id','tbl2')),'left'),\n  ';'\n].join(' ');\n```\n\n```sql\nselect `tbl1`.`col`,`tbl2`.`col` from `tbl1`\n  left join `tbl2` on `tbl1`.`id`=`tbl2`.`id` ;\n```\n\n### PostgreSQL Schema\n\n###### public by default\n```js\nvar x = new xsql({dialect:'pg'});\nvar query = [\n  x.select(x.name('col','tbl',x.schema())),\n  x.from(x.name('tbl',x.schema())),\n  ';'\n].join(' ');\n```\n\n```sql\nselect \"public\".\"tbl\".\"col\" from \"public\".\"tbl\" ;\n```\n\n###### globally defined\n\n```js\nvar x = new xsql({dialect:'pg', schema:'y'});\nvar query = [\n  x.select(x.name('col','tbl',x.schema())),\n  x.from(x.name('tbl',x.schema())),\n  ';'\n].join(' ');\n```\n\n```sql\nselect \"y\".\"tbl\".\"col\" from \"y\".\"tbl\" ;\n```\n\n###### specify schema\n\n```js\nvar x = new xsql({dialect:'pg', schema:'y'});\nvar query = [\n  x.select(x.name('col','tbl',x.schema('z'))),\n  x.from(x.name('tbl',x.schema())),\n  ';'\n].join(' ');\n```\n\n```sql\nselect \"z\".\"tbl\".\"col\" from \"y\".\"tbl\" ;\n```\n\n###### skip on other dialects\n\n```js\nvar x = new xsql({dialect:'sqlite'});\nvar query = [\n  x.select(x.name('col','tbl',x.schema('z'))),\n  x.from(x.name('tbl',x.schema())),\n  ';'\n].join(' ');\n```\n\n```sql\nselect \"tbl\".\"col\" from \"tbl\" ;\n```\n\n\n---\n\n\n### Wrapping it up\n\n#### concat\n```js\nfunction concat(columns, separator) {\n  return (/mysql|pg/.test(x.dialect))\n    ? x.func('concat_ws',[x.wrap(separator),columns])\n    // sqlite\n    : columns.join(\"||'\"+separator+\"'||\");\n}\n```\n###### mysql\n```js\nvar x = new xsql({dialect:'mysql'});\nvar partial = concat([x.name('col1','tbl'), x.name('col2','tbl')],',');\n```\n```sql\nconcat_ws(',',`tbl`.`col1`,`tbl`.`col2`)\n```\n###### sqlite\n```js\nvar x = new xsql({dialect:'sqlite'});\nvar partial = concat([x.name('col1','tbl'), x.name('col2','tbl')],',');\n```\n```sql\n\"tbl\".\"col1\"||','||\"tbl\".\"col2\"\n```\n\n#### group\n```js\nfunction group (columns) {\n  return (/mysql|sqlite/.test(x.dialect))\n    ? x.func('group_concat',['distinct',columns],' ')\n    // pg\n    : x.func('string_agg',['distinct',[columns,x.wrap(',')].join()],' ')\n}\n```\n###### mysql\n```js\nvar x = new xsql({dialect:'mysql'});\nvar partial = group([x.name('col1','tbl'), x.name('col2','tbl')],',');\n```\n```sql\ngroup_concat(distinct `tbl`.`col1`,`tbl`.`col2`)\n```\n###### pg\n```js\nvar x = new xsql({dialect:'pg'});\nvar partial = group([x.name('col1','tbl'), x.name('col2','tbl')],',');\n```\n```sql\nstring_agg(distinct \"tbl\".\"col1\",\"tbl\".\"col2\",',')\n```\n\n\n---\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/simov/xsql/issues"
  },
  "_id": "xsql@1.0.1",
  "_shasum": "5f277cef75dce385cd72adf0ca1d0745f390d77c",
  "_from": "xsql@1.0.1",
  "_resolved": "https://registry.npmjs.org/xsql/-/xsql-1.0.1.tgz"
}
